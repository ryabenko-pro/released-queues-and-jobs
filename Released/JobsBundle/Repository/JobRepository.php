<?php

namespace Released\JobsBundle\Repository;

use Released\JobsBundle\Entity\Job;
use Released\JobsBundle\Entity\JobEvent;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{

    /**
     * @param Job $jobEntity
     * @return int
     */
    public function saveJob(Job $jobEntity)
    {
        $em = $this->getEntityManager();
        $em->persist($jobEntity);
        $em->flush($jobEntity);

        return $jobEntity->getId();
    }

    /**
     * @param Job $job
     * @param int $count
     * @return int Rows affected
     */
    public function incPackagesFinished($job, $count = 1)
    {
        $qb = $this->createQueryBuilder("j")
            ->update()
            ->set("j.packagesFinished", "j.packagesFinished + :count")
            ->where("j.id = :id")
            ->setParameters([
                'count' => $count,
                'id'    => $job->getId(),
            ]);

        $q = $qb->getQuery();
        return $q->execute();
    }

    /**
     * @param int $limit
     * @return Job[]
     */
    public function findJobsForPlanning($limit)
    {
        $qb = $this->createQueryBuilder("j")
            ->leftJoin("j.jobType", "type")
            ->where("j.status IN (:statuses)")
            ->andWhere("j.isNeedPlanning = true")
            // TODO: select by lastPlanningAt + type.interval (using separate low level query)
            ->andWhere("j.nextPlanningAt IS NULL OR j.nextPlanningAt < :now")
            ->orderBy("j.plannedAt", "ASC")
            ->setParameter("statuses", [Job::STATUS_NEW, Job::STATUS_RUN])
            ->setParameter("now", new \DateTime())
            ->setMaxResults($limit);

        $q = $qb->getQuery();
        return $q->execute();
    }

    public function findJobsForFinishing($limit)
    {
        $qb = $this->createQueryBuilder("j")
            ->where("j.status = :status")
            ->andWhere("j.isNeedPlanning = :np")
            ->andWhere("j.packagesFinished >= j.packagesTotal")
            ->setParameter('np', false)
            ->setParameter('status', Job::STATUS_RUN)
            ->orderBy("j.plannedAt", "DESC")
            ->setMaxResults($limit);

        $q = $qb->getQuery();
        return $q->execute();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getListQueryBuilder()
    {
        $qb = $this->createQueryBuilder('j');

        $qb->select("j", "t")
            ->leftJoin("j.jobType", "t")
            ->orderBy("j.createdAt", "DESC");

        return $qb;
    }

    public function getJobSummary($id)
    {
        $qb = $this->createQueryBuilder('j');

        $qb->select("j", "t", "e")
            ->leftJoin("j.jobType", "t")
            ->leftJoin("j.events", "e", Expr\Join::WITH, "e.type = :type")
            ->where("j.id = :id")
            ->setParameters([
                'id' => $id,
                'type' => JobEvent::TYPE_ERROR
            ]);

        return $qb->getQuery()->getOneOrNullResult();
    }

}
